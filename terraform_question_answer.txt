1. What is Terraform and what are its main features?
Answer:
Terraform is an open-source infrastructure as code (IaC) tool created by HashiCorp. It allows users to define and provision data center infrastructure using a declarative configuration language called HashiCorp Configuration Language (HCL). Key features include:

Infrastructure as Code: Allows infrastructure to be described using code.
Execution Plans: Terraform generates an execution plan showing what it will do before it makes any changes.
Resource Graph: Builds a dependency graph to determine the optimal order of resource creation and modification.
Change Automation: Automatically applies the necessary changes to reach the desired state.
2. What are Terraform providers?
Answer:
Providers are a key component of Terraform that interact with APIs of various services. They are responsible for understanding API interactions and exposing resources. Providers can manage infrastructure from cloud providers (like AWS, Azure, GCP), as well as on-premise systems, SaaS services, etc.

3. How does Terraform manage dependencies between resources?
Answer:
Terraform manages dependencies using a directed acyclic graph (DAG). Each resource can declare dependencies using implicit or explicit methods. Implicit dependencies are created by referencing attributes of one resource in another. Explicit dependencies can be declared using the depends_on argument.

4. What is a state file in Terraform?
Answer:
The state file (terraform.tfstate) is used by Terraform to map real-world resources to your configuration, keep track of metadata, and improve performance for large infrastructures. The state file is critical for understanding the infrastructure’s current status and applying changes effectively.

5. How do you handle sensitive data in Terraform?
Answer:
Sensitive data can be managed using:

terraform.tfvars files to store variable values.
Environment variables to pass sensitive information.
Using secrets management tools like HashiCorp Vault.
Terraform Cloud/Enterprise's workspace variables with sensitive flags.
6. What are Terraform modules and how do you use them?
Answer:
Modules are reusable, self-contained packages of Terraform configurations that can be shared and used across multiple projects. Modules allow for better organization, reusability, and manageability. A module consists of .tf files in a directory. They are used by calling them with the module block in your configuration:

hcl
Copy code
module "example" {
  source = "./path/to/module"
  # Module variables
}
7. What is terraform init and what does it do?
Answer:
terraform init initializes a Terraform working directory. It downloads the necessary provider plugins, sets up the backend configuration, and prepares the working directory for other commands.

8. Explain the terraform plan and terraform apply commands.
Answer:

terraform plan: This command creates an execution plan, showing what actions Terraform will take to achieve the desired state described in the configuration files. It allows users to review changes before they are applied.
terraform apply: This command executes the actions proposed in the execution plan generated by terraform plan. It makes the actual changes to the infrastructure.
9. How do you manage Terraform state files in a team environment?
Answer:
In a team environment, it’s important to use a remote backend to store state files. This ensures state consistency and collaboration. Common remote backends include AWS S3 with DynamoDB for state locking, Terraform Cloud, Azure Blob Storage, and Google Cloud Storage.

10. What are Terraform workspaces?
Answer:
Workspaces are used to manage multiple environments (e.g., development, staging, production) within the same configuration. Each workspace has its own state file. You can create and switch between workspaces using the terraform workspace commands.

bash
Copy code
terraform workspace new dev
terraform workspace select dev
11. How do you import existing infrastructure into Terraform?
Answer:
You can import existing infrastructure using the terraform import command. This command associates existing resources with the Terraform state, allowing them to be managed through Terraform. Example:

bash
Copy code
terraform import aws_instance.example i-1234567890abcdef0
12. What are some best practices for writing Terraform configurations?
Answer:

Use modules to organize and reuse code.
Store state files in a remote backend.
Use version control for configuration files.
Write descriptive variable and output names.
Use terraform fmt and terraform validate for code formatting and validation.
Implement continuous integration and continuous deployment (CI/CD) for Terraform code.
Manage secrets securely and avoid hardcoding them in configuration files.